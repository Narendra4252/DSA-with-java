/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode revers(ListNode l , ListNode r){
        ListNode p = null ;
        ListNode c = l ;
        while(c != r){
            ListNode temp = c.next;
            c.next = p ;
            p = c ;
            c = temp ;
        }
        return p ;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
       ListNode temp = head ;
       int count = 0 ;
       while(count < k && temp != null){
        temp = temp.next;
        count++;
       }if(count == k){
        ListNode ans = revers(head , temp);
        head.next = reverseKGroup(temp , k);
        return ans ;
       }
       return head ;
    }
}
